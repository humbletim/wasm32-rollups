
runs:
  using: composite
  steps:
    - name: Ensure llvm-17
      shell: bash
      working-directory: libcxx
      run: |
        mkdir -p tmp
        apt download binaryen && dpkg -x binaryen*.deb tmp/
        echo $PWD/tmp/usr/bin | tee -a $GITHUB_PATH
        wget https://apt.llvm.org/llvm.sh
        chmod +x ./llvm.sh
        sudo ./llvm.sh 17 2>&1 | (grep -iE 'warning|error|fail|\bnot\b' || true)
        #curl https://github.com/bytecodealliance/wasmtime/releases/download/dev/wasmtime-dev-x86_64-linux.tar.xz \
        #    | tar --strip-components=1 -xvf wasmtime-dev-x86_64-linux/wasmtime

    - name: Preflight checks
      shell: bash
      working-directory: libcxx
      run: |
        clang++-17 --version | head -1
        llvm-config-17 --version
        wasm-dis --version

    - name: Build
      shell: bash
      working-directory: libcxx
      run: ./build.sh

    - name: Test
      shell: bash
      working-directory: libcxx
      run: |
        ls -l staging/ *.tar.gz
        echo artifact_name=$(date "+%Y%m%d").rollups.libcxx-wasm32 | tee -a $GITHUB_ENV | tee -a $GITHUB_STEP_SUMMARY
        ./build.sh compile c++ -o main.wasm test/main.cpp src/noops.*
        ( echo "### main.wasm" ; echo '```' ; node src/versions.js main.wasm ; echo '```' ) | tee -a $GITHUB_STEP_SUMMARY
        ./build.sh compile c -o stdio.wasm test/stdio.c src/noops.*.c
        ( echo "### stdio.wasm" ; echo '```' ; node src/versions.js stdio.wasm ; echo '```' ) | tee -a $GITHUB_STEP_SUMMARY

    - name: Upload Release Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.artifact_name }}
        path: libcxx/staging/
        compression-level: 9

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   #if: ${{ failure() }}
    #   with:
    #     limit-access-to-actor: true
